// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddCallOrder extends ethereum.Event {
  get params(): AddCallOrder__Params {
    return new AddCallOrder__Params(this);
  }
}

export class AddCallOrder__Params {
  _event: AddCallOrder;

  constructor(event: AddCallOrder) {
    this._event = event;
  }

  get _orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _callOrder(): AddCallOrder_callOrderStruct {
    return changetype<AddCallOrder_callOrderStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }

  get _holderWallet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _writerWallet(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class AddCallOrder_callOrderStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class AddPutOrder extends ethereum.Event {
  get params(): AddPutOrder__Params {
    return new AddPutOrder__Params(this);
  }
}

export class AddPutOrder__Params {
  _event: AddPutOrder;

  constructor(event: AddPutOrder) {
    this._event = event;
  }

  get _orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _putOrder(): AddPutOrder_putOrderStruct {
    return changetype<AddPutOrder_putOrderStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }

  get _holderWallet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _writerWallet(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class AddPutOrder_putOrderStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class DeleteCallOrder extends ethereum.Event {
  get params(): DeleteCallOrder__Params {
    return new DeleteCallOrder__Params(this);
  }
}

export class DeleteCallOrder__Params {
  _event: DeleteCallOrder;

  constructor(event: DeleteCallOrder) {
    this._event = event;
  }

  get _orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _callOrder(): DeleteCallOrder_callOrderStruct {
    return changetype<DeleteCallOrder_callOrderStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class DeleteCallOrder_callOrderStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class DeletePutOrder extends ethereum.Event {
  get params(): DeletePutOrder__Params {
    return new DeletePutOrder__Params(this);
  }
}

export class DeletePutOrder__Params {
  _event: DeletePutOrder;

  constructor(event: DeletePutOrder) {
    this._event = event;
  }

  get _orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _putOrder(): DeletePutOrder_putOrderStruct {
    return changetype<DeletePutOrder_putOrderStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class DeletePutOrder_putOrderStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class SetDomain extends ethereum.Event {
  get params(): SetDomain__Params {
    return new SetDomain__Params(this);
  }
}

export class SetDomain__Params {
  _event: SetDomain;

  constructor(event: SetDomain) {
    this._event = event;
  }

  get _name(): string {
    return this._event.parameters[0].value.toString();
  }

  get _version(): string {
    return this._event.parameters[1].value.toString();
  }

  get _contract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _domain(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class SetFeeRate extends ethereum.Event {
  get params(): SetFeeRate__Params {
    return new SetFeeRate__Params(this);
  }
}

export class SetFeeRate__Params {
  _event: SetFeeRate;

  constructor(event: SetFeeRate) {
    this._event = event;
  }

  get _feeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetFeeRecipient extends ethereum.Event {
  get params(): SetFeeRecipient__Params {
    return new SetFeeRecipient__Params(this);
  }
}

export class SetFeeRecipient__Params {
  _event: SetFeeRecipient;

  constructor(event: SetFeeRecipient) {
    this._event = event;
  }

  get _feeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetNftType extends ethereum.Event {
  get params(): SetNftType__Params {
    return new SetNftType__Params(this);
  }
}

export class SetNftType__Params {
  _event: SetNftType;

  constructor(event: SetNftType) {
    this._event = event;
  }

  get _nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _type(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class SetOrderId extends ethereum.Event {
  get params(): SetOrderId__Params {
    return new SetOrderId__Params(this);
  }
}

export class SetOrderId__Params {
  _event: SetOrderId;

  constructor(event: SetOrderId) {
    this._event = event;
  }

  get _orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetSigatureLock extends ethereum.Event {
  get params(): SetSigatureLock__Params {
    return new SetSigatureLock__Params(this);
  }
}

export class SetSigatureLock__Params {
  _event: SetSigatureLock;

  constructor(event: SetSigatureLock) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _orderType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _underlyingAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SetUnderlyTotal extends ethereum.Event {
  get params(): SetUnderlyTotal__Params {
    return new SetUnderlyTotal__Params(this);
  }
}

export class SetUnderlyTotal__Params {
  _event: SetUnderlyTotal;

  constructor(event: SetUnderlyTotal) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _orderType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _underlyingAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _total(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Diamond__getCallOrderResultValue0Struct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class Diamond__getPutOrderResultValue0Struct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class Diamond extends ethereum.SmartContract {
  static bind(address: Address): Diamond {
    return new Diamond("Diamond", address);
  }

  getCallOrder(_orderId: BigInt): Diamond__getCallOrderResultValue0Struct {
    let result = super.call(
      "getCallOrder",
      "getCallOrder(uint64):((address,uint8,address,uint8,address,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)],
    );

    return changetype<Diamond__getCallOrderResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getCallOrder(
    _orderId: BigInt,
  ): ethereum.CallResult<Diamond__getCallOrderResultValue0Struct> {
    let result = super.tryCall(
      "getCallOrder",
      "getCallOrder(uint64):((address,uint8,address,uint8,address,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Diamond__getCallOrderResultValue0Struct>(value[0].toTuple()),
    );
  }

  getDomain(): Bytes {
    let result = super.call("getDomain", "getDomain():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getDomain(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getDomain", "getDomain():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFeeRate(): BigInt {
    let result = super.call("getFeeRate", "getFeeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFeeRate", "getFeeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeeRecipient(): Address {
    let result = super.call(
      "getFeeRecipient",
      "getFeeRecipient():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFeeRecipient",
      "getFeeRecipient():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHolderCalls(_holder: Address): Array<BigInt> {
    let result = super.call(
      "getHolderCalls",
      "getHolderCalls(address):(uint64[])",
      [ethereum.Value.fromAddress(_holder)],
    );

    return result[0].toBigIntArray();
  }

  try_getHolderCalls(_holder: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getHolderCalls",
      "getHolderCalls(address):(uint64[])",
      [ethereum.Value.fromAddress(_holder)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getHolderPuts(_holder: Address): Array<BigInt> {
    let result = super.call(
      "getHolderPuts",
      "getHolderPuts(address):(uint64[])",
      [ethereum.Value.fromAddress(_holder)],
    );

    return result[0].toBigIntArray();
  }

  try_getHolderPuts(_holder: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getHolderPuts",
      "getHolderPuts(address):(uint64[])",
      [ethereum.Value.fromAddress(_holder)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNftType(_nft: Address): i32 {
    let result = super.call("getNftType", "getNftType(address):(uint8)", [
      ethereum.Value.fromAddress(_nft),
    ]);

    return result[0].toI32();
  }

  try_getNftType(_nft: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("getNftType", "getNftType(address):(uint8)", [
      ethereum.Value.fromAddress(_nft),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getOrderId(): BigInt {
    let result = super.call("getOrderId", "getOrderId():(uint64)", []);

    return result[0].toBigInt();
  }

  try_getOrderId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getOrderId", "getOrderId():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPutOrder(_orderId: BigInt): Diamond__getPutOrderResultValue0Struct {
    let result = super.call(
      "getPutOrder",
      "getPutOrder(uint64):((address,uint8,address,uint8,address,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)],
    );

    return changetype<Diamond__getPutOrderResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPutOrder(
    _orderId: BigInt,
  ): ethereum.CallResult<Diamond__getPutOrderResultValue0Struct> {
    let result = super.tryCall(
      "getPutOrder",
      "getPutOrder(uint64):((address,uint8,address,uint8,address,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Diamond__getPutOrderResultValue0Struct>(value[0].toTuple()),
    );
  }

  getSigatureLock(
    _vault: Address,
    _orderType: i32,
    _underlyingAsset: Address,
  ): BigInt {
    let result = super.call(
      "getSigatureLock",
      "getSigatureLock(address,uint8,address):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_orderType)),
        ethereum.Value.fromAddress(_underlyingAsset),
      ],
    );

    return result[0].toBigInt();
  }

  try_getSigatureLock(
    _vault: Address,
    _orderType: i32,
    _underlyingAsset: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSigatureLock",
      "getSigatureLock(address,uint8,address):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_orderType)),
        ethereum.Value.fromAddress(_underlyingAsset),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyTotal(
    _vault: Address,
    _orderType: i32,
    _underlyingAsset: Address,
  ): BigInt {
    let result = super.call(
      "getUnderlyTotal",
      "getUnderlyTotal(address,uint8,address):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_orderType)),
        ethereum.Value.fromAddress(_underlyingAsset),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUnderlyTotal(
    _vault: Address,
    _orderType: i32,
    _underlyingAsset: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyTotal",
      "getUnderlyTotal(address,uint8,address):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_orderType)),
        ethereum.Value.fromAddress(_underlyingAsset),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWriterCalls(_writer: Address): Array<BigInt> {
    let result = super.call(
      "getWriterCalls",
      "getWriterCalls(address):(uint64[])",
      [ethereum.Value.fromAddress(_writer)],
    );

    return result[0].toBigIntArray();
  }

  try_getWriterCalls(_writer: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getWriterCalls",
      "getWriterCalls(address):(uint64[])",
      [ethereum.Value.fromAddress(_writer)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getWriterPuts(_writer: Address): Array<BigInt> {
    let result = super.call(
      "getWriterPuts",
      "getWriterPuts(address):(uint64[])",
      [ethereum.Value.fromAddress(_writer)],
    );

    return result[0].toBigIntArray();
  }

  try_getWriterPuts(_writer: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getWriterPuts",
      "getWriterPuts(address):(uint64[])",
      [ethereum.Value.fromAddress(_writer)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class AddCallOrderCall extends ethereum.Call {
  get inputs(): AddCallOrderCall__Inputs {
    return new AddCallOrderCall__Inputs(this);
  }

  get outputs(): AddCallOrderCall__Outputs {
    return new AddCallOrderCall__Outputs(this);
  }
}

export class AddCallOrderCall__Inputs {
  _call: AddCallOrderCall;

  constructor(call: AddCallOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _callOrder(): AddCallOrderCall_callOrderStruct {
    return changetype<AddCallOrderCall_callOrderStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class AddCallOrderCall__Outputs {
  _call: AddCallOrderCall;

  constructor(call: AddCallOrderCall) {
    this._call = call;
  }
}

export class AddCallOrderCall_callOrderStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class AddPutOrderCall extends ethereum.Call {
  get inputs(): AddPutOrderCall__Inputs {
    return new AddPutOrderCall__Inputs(this);
  }

  get outputs(): AddPutOrderCall__Outputs {
    return new AddPutOrderCall__Outputs(this);
  }
}

export class AddPutOrderCall__Inputs {
  _call: AddPutOrderCall;

  constructor(call: AddPutOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _putOrder(): AddPutOrderCall_putOrderStruct {
    return changetype<AddPutOrderCall_putOrderStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class AddPutOrderCall__Outputs {
  _call: AddPutOrderCall;

  constructor(call: AddPutOrderCall) {
    this._call = call;
  }
}

export class AddPutOrderCall_putOrderStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get liquidateMode(): i32 {
    return this[1].toI32();
  }

  get writer(): Address {
    return this[2].toAddress();
  }

  get underlyingAssetType(): i32 {
    return this[3].toI32();
  }

  get recipient(): Address {
    return this[4].toAddress();
  }

  get underlyingAsset(): Address {
    return this[5].toAddress();
  }

  get strikeAsset(): Address {
    return this[6].toAddress();
  }

  get underlyingAmount(): BigInt {
    return this[7].toBigInt();
  }

  get strikeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[9].toBigInt();
  }

  get underlyingNftID(): BigInt {
    return this[10].toBigInt();
  }
}

export class DeleteCallOrderCall extends ethereum.Call {
  get inputs(): DeleteCallOrderCall__Inputs {
    return new DeleteCallOrderCall__Inputs(this);
  }

  get outputs(): DeleteCallOrderCall__Outputs {
    return new DeleteCallOrderCall__Outputs(this);
  }
}

export class DeleteCallOrderCall__Inputs {
  _call: DeleteCallOrderCall;

  constructor(call: DeleteCallOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteCallOrderCall__Outputs {
  _call: DeleteCallOrderCall;

  constructor(call: DeleteCallOrderCall) {
    this._call = call;
  }
}

export class DeletePutOrderCall extends ethereum.Call {
  get inputs(): DeletePutOrderCall__Inputs {
    return new DeletePutOrderCall__Inputs(this);
  }

  get outputs(): DeletePutOrderCall__Outputs {
    return new DeletePutOrderCall__Outputs(this);
  }
}

export class DeletePutOrderCall__Inputs {
  _call: DeletePutOrderCall;

  constructor(call: DeletePutOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeletePutOrderCall__Outputs {
  _call: DeletePutOrderCall;

  constructor(call: DeletePutOrderCall) {
    this._call = call;
  }
}

export class SetDomainCall extends ethereum.Call {
  get inputs(): SetDomainCall__Inputs {
    return new SetDomainCall__Inputs(this);
  }

  get outputs(): SetDomainCall__Outputs {
    return new SetDomainCall__Outputs(this);
  }
}

export class SetDomainCall__Inputs {
  _call: SetDomainCall;

  constructor(call: SetDomainCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _version(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _contract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetDomainCall__Outputs {
  _call: SetDomainCall;

  constructor(call: SetDomainCall) {
    this._call = call;
  }
}

export class SetFeeRateCall extends ethereum.Call {
  get inputs(): SetFeeRateCall__Inputs {
    return new SetFeeRateCall__Inputs(this);
  }

  get outputs(): SetFeeRateCall__Outputs {
    return new SetFeeRateCall__Outputs(this);
  }
}

export class SetFeeRateCall__Inputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }

  get _feeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeRateCall__Outputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetNftTypeCall extends ethereum.Call {
  get inputs(): SetNftTypeCall__Inputs {
    return new SetNftTypeCall__Inputs(this);
  }

  get outputs(): SetNftTypeCall__Outputs {
    return new SetNftTypeCall__Outputs(this);
  }
}

export class SetNftTypeCall__Inputs {
  _call: SetNftTypeCall;

  constructor(call: SetNftTypeCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _type(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetNftTypeCall__Outputs {
  _call: SetNftTypeCall;

  constructor(call: SetNftTypeCall) {
    this._call = call;
  }
}

export class SetOrderIdCall extends ethereum.Call {
  get inputs(): SetOrderIdCall__Inputs {
    return new SetOrderIdCall__Inputs(this);
  }

  get outputs(): SetOrderIdCall__Outputs {
    return new SetOrderIdCall__Outputs(this);
  }
}

export class SetOrderIdCall__Inputs {
  _call: SetOrderIdCall;

  constructor(call: SetOrderIdCall) {
    this._call = call;
  }
}

export class SetOrderIdCall__Outputs {
  _call: SetOrderIdCall;

  constructor(call: SetOrderIdCall) {
    this._call = call;
  }
}

export class SetSigatureLockCall extends ethereum.Call {
  get inputs(): SetSigatureLockCall__Inputs {
    return new SetSigatureLockCall__Inputs(this);
  }

  get outputs(): SetSigatureLockCall__Outputs {
    return new SetSigatureLockCall__Outputs(this);
  }
}

export class SetSigatureLockCall__Inputs {
  _call: SetSigatureLockCall;

  constructor(call: SetSigatureLockCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetSigatureLockCall__Outputs {
  _call: SetSigatureLockCall;

  constructor(call: SetSigatureLockCall) {
    this._call = call;
  }
}

export class SetUnderlyTotalCall extends ethereum.Call {
  get inputs(): SetUnderlyTotalCall__Inputs {
    return new SetUnderlyTotalCall__Inputs(this);
  }

  get outputs(): SetUnderlyTotalCall__Outputs {
    return new SetUnderlyTotalCall__Outputs(this);
  }
}

export class SetUnderlyTotalCall__Inputs {
  _call: SetUnderlyTotalCall;

  constructor(call: SetUnderlyTotalCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _total(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetUnderlyTotalCall__Outputs {
  _call: SetUnderlyTotalCall;

  constructor(call: SetUnderlyTotalCall) {
    this._call = call;
  }
}
