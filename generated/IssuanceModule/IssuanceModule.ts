// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Issue extends ethereum.Event {
  get params(): Issue__Params {
    return new Issue__Params(this);
  }
}

export class Issue__Params {
  _event: Issue;

  constructor(event: Issue) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _assets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _assetsType(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get _assets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IssuanceModule__getWhiteListAndModeResult {
  value0: i32;
  value1: boolean;

  constructor(value0: i32, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): boolean {
    return this.value1;
  }
}

export class IssuanceModule extends ethereum.SmartContract {
  static bind(address: Address): IssuanceModule {
    return new IssuanceModule("IssuanceModule", address);
  }

  diamond(): Address {
    let result = super.call("diamond", "diamond():(address)", []);

    return result[0].toAddress();
  }

  try_diamond(): ethereum.CallResult<Address> {
    let result = super.tryCall("diamond", "diamond():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWhiteListAndMode(
    _vault: Address,
    _issuer: Address,
  ): IssuanceModule__getWhiteListAndModeResult {
    let result = super.call(
      "getWhiteListAndMode",
      "getWhiteListAndMode(address,address):(uint8,bool)",
      [ethereum.Value.fromAddress(_vault), ethereum.Value.fromAddress(_issuer)],
    );

    return new IssuanceModule__getWhiteListAndModeResult(
      result[0].toI32(),
      result[1].toBoolean(),
    );
  }

  try_getWhiteListAndMode(
    _vault: Address,
    _issuer: Address,
  ): ethereum.CallResult<IssuanceModule__getWhiteListAndModeResult> {
    let result = super.tryCall(
      "getWhiteListAndMode",
      "getWhiteListAndMode(address,address):(uint8,bool)",
      [ethereum.Value.fromAddress(_vault), ethereum.Value.fromAddress(_issuer)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IssuanceModule__getWhiteListAndModeResult(
        value[0].toI32(),
        value[1].toBoolean(),
      ),
    );
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _diamond(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class IssueAndProxyCall extends ethereum.Call {
  get inputs(): IssueAndProxyCall__Inputs {
    return new IssueAndProxyCall__Inputs(this);
  }

  get outputs(): IssueAndProxyCall__Outputs {
    return new IssueAndProxyCall__Outputs(this);
  }
}

export class IssueAndProxyCall__Inputs {
  _call: IssueAndProxyCall;

  constructor(call: IssueAndProxyCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class IssueAndProxyCall__Outputs {
  _call: IssueAndProxyCall;

  constructor(call: IssueAndProxyCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _assetsType(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemProxyCall extends ethereum.Call {
  get inputs(): RedeemProxyCall__Inputs {
    return new RedeemProxyCall__Inputs(this);
  }

  get outputs(): RedeemProxyCall__Outputs {
    return new RedeemProxyCall__Outputs(this);
  }
}

export class RedeemProxyCall__Inputs {
  _call: RedeemProxyCall;

  constructor(call: RedeemProxyCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _assetsType(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class RedeemProxyCall__Outputs {
  _call: RedeemProxyCall;

  constructor(call: RedeemProxyCall) {
    this._call = call;
  }
}

export class SetProxyIssueWhiteListCall extends ethereum.Call {
  get inputs(): SetProxyIssueWhiteListCall__Inputs {
    return new SetProxyIssueWhiteListCall__Inputs(this);
  }

  get outputs(): SetProxyIssueWhiteListCall__Outputs {
    return new SetProxyIssueWhiteListCall__Outputs(this);
  }
}

export class SetProxyIssueWhiteListCall__Inputs {
  _call: SetProxyIssueWhiteListCall;

  constructor(call: SetProxyIssueWhiteListCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _issuer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetProxyIssueWhiteListCall__Outputs {
  _call: SetProxyIssueWhiteListCall;

  constructor(call: SetProxyIssueWhiteListCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
